version: "3.8"

services:
  swagger:
    image: swaggerapi/swagger-ui
    container_name: swagger
    environment:
      - SWAGGER_JSON=/swagger/swagger.yml
    volumes:
      - ./api:/swagger
    ports:
      - 5000:8080

  gateway:
    image: nginx:1.27.2-alpine
    container_name: gateway
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - users_service
      - chats_service
      - messages_service
    ports:
      - 8080:8080

  users_service:
    build:
      context: .
      dockerfile: docker/Dockerfile.user-service
    container_name: users_service
    environment:
      - SERVER_PORT=8080
      - POSTGRES_HOST=users_postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=users
      - POSTGRES_USER=users_service
      - POSTGRES_PASSWORD=secret
    depends_on:
      users_postgres:
        condition: service_healthy
      users_migrate:
        condition: service_completed_successfully

  users_postgres:
    container_name: users_postgres
    image: postgres:16.2-alpine
    environment:
      - POSTGRES_DB=users
      - POSTGRES_USER=users_service
      - POSTGRES_PASSWORD=secret
    volumes:
      - users_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: pg_isready -d users -U users_service
      interval: 5s
      timeout: 5s
      retries: 5

  users_migrate:
    image: migrate/migrate
    container_name: users_migrate
    volumes:
      - ./user-service/migrations:/migrations
    entrypoint: >
      sh -c 'migrate -path /migrations \
        -database "postgres://users_service:secret@users_postgres:5432/users?sslmode=disable" up
      '
    depends_on:
      users_postgres:
        condition: service_healthy

  chats_service:
    build:
      context: .
      dockerfile: docker/Dockerfile.chats-service
    container_name: chats_service
    environment:
      - SERVER_PORT=8080
      - POSTGRES_HOST=chats_postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=chats
      - POSTGRES_USER=chats_service
      - POSTGRES_PASSWORD=secret
      - MESSAGES_HOST=messages_service
      - MESSAGES_PORT=8080
    depends_on:
      chats_postgres:
        condition: service_healthy
      chats_migrate:
        condition: service_completed_successfully
      messages_service:
        condition: service_started

  chats_postgres:
    container_name: chats_postgres
    image: postgres:16.2-alpine
    environment:
      - POSTGRES_DB=chats
      - POSTGRES_USER=chats_service
      - POSTGRES_PASSWORD=secret
    volumes:
      - chats_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: pg_isready -d chats -U chats_service
      interval: 5s
      timeout: 5s
      retries: 5

  chats_migrate:
    image: migrate/migrate
    container_name: chats_migrate
    volumes:
      - ./chats-service/migrations:/migrations
    entrypoint: >
      sh -c 'migrate -path /migrations \
        -database "postgres://chats_service:secret@chats_postgres:5432/chats?sslmode=disable" up
      '
    depends_on:
      chats_postgres:
        condition: service_healthy

  messages_service:
    build:
      context: .
      dockerfile: docker/Dockerfile.messages-service
    container_name: messages_service
    environment:
      - SERVER_PORT=8080
      - POSTGRES_HOST=messages_postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=messages
      - POSTGRES_USER=messages_service
      - POSTGRES_PASSWORD=secret
    depends_on:
      messages_postgres:
        condition: service_healthy
      messages_migrate:
        condition: service_completed_successfully

  messages_postgres:
    container_name: messages_postgres
    image: postgres:16.2-alpine
    environment:
      - POSTGRES_DB=messages
      - POSTGRES_USER=messages_service
      - POSTGRES_PASSWORD=secret
    volumes:
      - messages_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: pg_isready -d messages -U messages_service
      interval: 5s
      timeout: 5s
      retries: 5

  messages_migrate:
    image: migrate/migrate
    container_name: messages_migrate
    volumes:
      - ./messages-service/migrations:/migrations
    entrypoint: >
      sh -c 'migrate -path /migrations \
        -database "postgres://messages_service:secret@messages_postgres:5432/messages?sslmode=disable" up
      '
    depends_on:
      messages_postgres:
        condition: service_healthy

volumes:
  users_postgres_data:
  chats_postgres_data:
  messages_postgres_data:
