// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	AuthHandler
	UsersHandler
}

// AuthHandler handles operations described by OpenAPI v3 specification.
//
// x-ogen-operation-group: Auth
type AuthHandler interface {
	// CheckToken implements checkToken operation.
	//
	// Check token.
	//
	// GET /auth/check
	CheckToken(ctx context.Context) (CheckTokenRes, error)
	// SignIn implements signIn operation.
	//
	// Sign in to messanger.
	//
	// POST /auth/sign-in
	SignIn(ctx context.Context, req *SignInReq) (SignInRes, error)
	// SignUp implements signUp operation.
	//
	// Sign up to messanger.
	//
	// POST /auth/sign-up
	SignUp(ctx context.Context, req *SignUpReq) (SignUpRes, error)
}

// UsersHandler handles operations described by OpenAPI v3 specification.
//
// x-ogen-operation-group: Users
type UsersHandler interface {
	// ChangePassword implements changePassword operation.
	//
	// Change password.
	//
	// POST /users/me/change-password
	ChangePassword(ctx context.Context, req *ChangePasswordReq) (ChangePasswordRes, error)
	// GetMe implements getMe operation.
	//
	// Get user info by token.
	//
	// GET /users/me
	GetMe(ctx context.Context) (GetMeRes, error)
	// GetUserById implements getUserById operation.
	//
	// Get user by id.
	//
	// GET /users/{userId}
	GetUserById(ctx context.Context, params GetUserByIdParams) (GetUserByIdRes, error)
	// UpdateMe implements updateMe operation.
	//
	// Update user info.
	//
	// PUT /users/me
	UpdateMe(ctx context.Context, req *UserInput) (UpdateMeRes, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h   Handler
	sec SecurityHandler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, sec SecurityHandler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		sec:        sec,
		baseServer: s,
	}, nil
}
