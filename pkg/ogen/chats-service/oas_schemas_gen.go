// Code generated by ogen, DO NOT EDIT.

package api

import (
	"github.com/go-faster/errors"
)

// BanUserNoContent is response for BanUser operation.
type BanUserNoContent struct{}

func (*BanUserNoContent) banUserRes() {}

// BanUserNotFound is response for BanUser operation.
type BanUserNotFound struct{}

func (*BanUserNotFound) banUserRes() {}

type BearerAuth struct {
	Token string
}

// GetToken returns the value of Token.
func (s *BearerAuth) GetToken() string {
	return s.Token
}

// SetToken sets the value of Token.
func (s *BearerAuth) SetToken(val string) {
	s.Token = val
}

// Ref: #/components/schemas/chat
type Chat struct {
	ID          OptChatId `json:"id"`
	Name        OptString `json:"name"`
	Description OptString `json:"description"`
}

// GetID returns the value of ID.
func (s *Chat) GetID() OptChatId {
	return s.ID
}

// GetName returns the value of Name.
func (s *Chat) GetName() OptString {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *Chat) GetDescription() OptString {
	return s.Description
}

// SetID sets the value of ID.
func (s *Chat) SetID(val OptChatId) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *Chat) SetName(val OptString) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *Chat) SetDescription(val OptString) {
	s.Description = val
}

func (*Chat) createChatRes()  {}
func (*Chat) getChatByIdRes() {}
func (*Chat) updateChatRes()  {}

type ChatId int

// Ref: #/components/schemas/chatInput
type ChatInput struct {
	Name        string `json:"name"`
	Description string `json:"description"`
}

// GetName returns the value of Name.
func (s *ChatInput) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *ChatInput) GetDescription() string {
	return s.Description
}

// SetName sets the value of Name.
func (s *ChatInput) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *ChatInput) SetDescription(val string) {
	s.Description = val
}

// Ref: #/components/responses/chatNotFoundResponse
type ChatNotFoundResponse struct{}

func (*ChatNotFoundResponse) createRoleRes()  {}
func (*ChatNotFoundResponse) deleteChatRes()  {}
func (*ChatNotFoundResponse) getChatByIdRes() {}
func (*ChatNotFoundResponse) getJoinCodeRes() {}
func (*ChatNotFoundResponse) joinChatRes()    {}
func (*ChatNotFoundResponse) leaveChatRes()   {}
func (*ChatNotFoundResponse) listMembersRes() {}
func (*ChatNotFoundResponse) listRolesRes()   {}
func (*ChatNotFoundResponse) updateChatRes()  {}

// CheckAccessNoContent is response for CheckAccess operation.
type CheckAccessNoContent struct{}

func (*CheckAccessNoContent) checkAccessRes() {}

// CheckAccessNotFound is response for CheckAccess operation.
type CheckAccessNotFound struct{}

func (*CheckAccessNotFound) checkAccessRes() {}

type CheckAccessXTargetMethod string

const (
	CheckAccessXTargetMethodGET    CheckAccessXTargetMethod = "GET"
	CheckAccessXTargetMethodPOST   CheckAccessXTargetMethod = "POST"
	CheckAccessXTargetMethodPUT    CheckAccessXTargetMethod = "PUT"
	CheckAccessXTargetMethodDELETE CheckAccessXTargetMethod = "DELETE"
)

// AllValues returns all CheckAccessXTargetMethod values.
func (CheckAccessXTargetMethod) AllValues() []CheckAccessXTargetMethod {
	return []CheckAccessXTargetMethod{
		CheckAccessXTargetMethodGET,
		CheckAccessXTargetMethodPOST,
		CheckAccessXTargetMethodPUT,
		CheckAccessXTargetMethodDELETE,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CheckAccessXTargetMethod) MarshalText() ([]byte, error) {
	switch s {
	case CheckAccessXTargetMethodGET:
		return []byte(s), nil
	case CheckAccessXTargetMethodPOST:
		return []byte(s), nil
	case CheckAccessXTargetMethodPUT:
		return []byte(s), nil
	case CheckAccessXTargetMethodDELETE:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CheckAccessXTargetMethod) UnmarshalText(data []byte) error {
	switch CheckAccessXTargetMethod(data) {
	case CheckAccessXTargetMethodGET:
		*s = CheckAccessXTargetMethodGET
		return nil
	case CheckAccessXTargetMethodPOST:
		*s = CheckAccessXTargetMethodPOST
		return nil
	case CheckAccessXTargetMethodPUT:
		*s = CheckAccessXTargetMethodPUT
		return nil
	case CheckAccessXTargetMethodDELETE:
		*s = CheckAccessXTargetMethodDELETE
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// DeleteChatNoContent is response for DeleteChat operation.
type DeleteChatNoContent struct{}

func (*DeleteChatNoContent) deleteChatRes() {}

// DeleteRoleNoContent is response for DeleteRole operation.
type DeleteRoleNoContent struct{}

func (*DeleteRoleNoContent) deleteRoleRes() {}

// DeleteRoleNotFound is response for DeleteRole operation.
type DeleteRoleNotFound struct{}

func (*DeleteRoleNotFound) deleteRoleRes() {}

// GetRoleByIdNotFound is response for GetRoleById operation.
type GetRoleByIdNotFound struct{}

func (*GetRoleByIdNotFound) getRoleByIdRes() {}

// Ref: #/components/responses/internalErrorResponse
type InternalErrorResponse struct{}

func (*InternalErrorResponse) banUserRes()     {}
func (*InternalErrorResponse) checkAccessRes() {}
func (*InternalErrorResponse) createChatRes()  {}
func (*InternalErrorResponse) createRoleRes()  {}
func (*InternalErrorResponse) deleteChatRes()  {}
func (*InternalErrorResponse) deleteRoleRes()  {}
func (*InternalErrorResponse) getChatByIdRes() {}
func (*InternalErrorResponse) getJoinCodeRes() {}
func (*InternalErrorResponse) getRoleByIdRes() {}
func (*InternalErrorResponse) joinChatRes()    {}
func (*InternalErrorResponse) leaveChatRes()   {}
func (*InternalErrorResponse) listChatsRes()   {}
func (*InternalErrorResponse) listMembersRes() {}
func (*InternalErrorResponse) listRolesRes()   {}
func (*InternalErrorResponse) setRoleRes()     {}
func (*InternalErrorResponse) updateChatRes()  {}
func (*InternalErrorResponse) updateRoleRes()  {}

type InvalidInputResponse struct {
	Message OptString `json:"message"`
}

// GetMessage returns the value of Message.
func (s *InvalidInputResponse) GetMessage() OptString {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *InvalidInputResponse) SetMessage(val OptString) {
	s.Message = val
}

func (*InvalidInputResponse) banUserRes()     {}
func (*InvalidInputResponse) checkAccessRes() {}
func (*InvalidInputResponse) createChatRes()  {}
func (*InvalidInputResponse) createRoleRes()  {}
func (*InvalidInputResponse) deleteChatRes()  {}
func (*InvalidInputResponse) deleteRoleRes()  {}
func (*InvalidInputResponse) getChatByIdRes() {}
func (*InvalidInputResponse) getJoinCodeRes() {}
func (*InvalidInputResponse) getRoleByIdRes() {}
func (*InvalidInputResponse) joinChatRes()    {}
func (*InvalidInputResponse) leaveChatRes()   {}
func (*InvalidInputResponse) listMembersRes() {}
func (*InvalidInputResponse) listRolesRes()   {}
func (*InvalidInputResponse) setRoleRes()     {}
func (*InvalidInputResponse) updateChatRes()  {}
func (*InvalidInputResponse) updateRoleRes()  {}

// JoinChatNoContent is response for JoinChat operation.
type JoinChatNoContent struct{}

func (*JoinChatNoContent) joinChatRes() {}

type JoinChatReq struct {
	JoinCode string `json:"join_code"`
}

// GetJoinCode returns the value of JoinCode.
func (s *JoinChatReq) GetJoinCode() string {
	return s.JoinCode
}

// SetJoinCode sets the value of JoinCode.
func (s *JoinChatReq) SetJoinCode(val string) {
	s.JoinCode = val
}

type JoinCodeResponse struct {
	JoinCode OptString `json:"join_code"`
}

// GetJoinCode returns the value of JoinCode.
func (s *JoinCodeResponse) GetJoinCode() OptString {
	return s.JoinCode
}

// SetJoinCode sets the value of JoinCode.
func (s *JoinCodeResponse) SetJoinCode(val OptString) {
	s.JoinCode = val
}

func (*JoinCodeResponse) getJoinCodeRes() {}

// LeaveChatNoContent is response for LeaveChat operation.
type LeaveChatNoContent struct{}

func (*LeaveChatNoContent) leaveChatRes() {}

type ListChatsOKApplicationJSON []Chat

func (*ListChatsOKApplicationJSON) listChatsRes() {}

type ListMembersOKApplicationJSON []Member

func (*ListMembersOKApplicationJSON) listMembersRes() {}

type ListRolesOKApplicationJSON []Role

func (*ListRolesOKApplicationJSON) listRolesRes() {}

// Ref: #/components/schemas/member
type Member struct {
	UserID OptUserId `json:"user_id"`
	RoleID OptInt    `json:"role_id"`
}

// GetUserID returns the value of UserID.
func (s *Member) GetUserID() OptUserId {
	return s.UserID
}

// GetRoleID returns the value of RoleID.
func (s *Member) GetRoleID() OptInt {
	return s.RoleID
}

// SetUserID sets the value of UserID.
func (s *Member) SetUserID(val OptUserId) {
	s.UserID = val
}

// SetRoleID sets the value of RoleID.
func (s *Member) SetRoleID(val OptInt) {
	s.RoleID = val
}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptChatId returns new OptChatId with value set to v.
func NewOptChatId(v ChatId) OptChatId {
	return OptChatId{
		Value: v,
		Set:   true,
	}
}

// OptChatId is optional ChatId.
type OptChatId struct {
	Value ChatId
	Set   bool
}

// IsSet returns true if OptChatId was set.
func (o OptChatId) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptChatId) Reset() {
	var v ChatId
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptChatId) SetTo(v ChatId) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptChatId) Get() (v ChatId, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptChatId) Or(d ChatId) ChatId {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRoleId returns new OptRoleId with value set to v.
func NewOptRoleId(v RoleId) OptRoleId {
	return OptRoleId{
		Value: v,
		Set:   true,
	}
}

// OptRoleId is optional RoleId.
type OptRoleId struct {
	Value RoleId
	Set   bool
}

// IsSet returns true if OptRoleId was set.
func (o OptRoleId) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRoleId) Reset() {
	var v RoleId
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRoleId) SetTo(v RoleId) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRoleId) Get() (v RoleId, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRoleId) Or(d RoleId) RoleId {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserId returns new OptUserId with value set to v.
func NewOptUserId(v UserId) OptUserId {
	return OptUserId{
		Value: v,
		Set:   true,
	}
}

// OptUserId is optional UserId.
type OptUserId struct {
	Value UserId
	Set   bool
}

// IsSet returns true if OptUserId was set.
func (o OptUserId) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserId) Reset() {
	var v UserId
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserId) SetTo(v UserId) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserId) Get() (v UserId, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserId) Or(d UserId) UserId {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/role
type Role struct {
	ID              OptRoleId `json:"id"`
	Name            OptString `json:"name"`
	CanBanUsers     OptBool   `json:"can_ban_users"`
	CanEditRoles    OptBool   `json:"can_edit_roles"`
	CanEditMessages OptBool   `json:"can_edit_messages"`
	CanGetJoinCode  OptBool   `json:"can_get_join_code"`
	CanEditChatInfo OptBool   `json:"can_edit_chat_info"`
	CanDeleteChat   OptBool   `json:"can_delete_chat"`
}

// GetID returns the value of ID.
func (s *Role) GetID() OptRoleId {
	return s.ID
}

// GetName returns the value of Name.
func (s *Role) GetName() OptString {
	return s.Name
}

// GetCanBanUsers returns the value of CanBanUsers.
func (s *Role) GetCanBanUsers() OptBool {
	return s.CanBanUsers
}

// GetCanEditRoles returns the value of CanEditRoles.
func (s *Role) GetCanEditRoles() OptBool {
	return s.CanEditRoles
}

// GetCanEditMessages returns the value of CanEditMessages.
func (s *Role) GetCanEditMessages() OptBool {
	return s.CanEditMessages
}

// GetCanGetJoinCode returns the value of CanGetJoinCode.
func (s *Role) GetCanGetJoinCode() OptBool {
	return s.CanGetJoinCode
}

// GetCanEditChatInfo returns the value of CanEditChatInfo.
func (s *Role) GetCanEditChatInfo() OptBool {
	return s.CanEditChatInfo
}

// GetCanDeleteChat returns the value of CanDeleteChat.
func (s *Role) GetCanDeleteChat() OptBool {
	return s.CanDeleteChat
}

// SetID sets the value of ID.
func (s *Role) SetID(val OptRoleId) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *Role) SetName(val OptString) {
	s.Name = val
}

// SetCanBanUsers sets the value of CanBanUsers.
func (s *Role) SetCanBanUsers(val OptBool) {
	s.CanBanUsers = val
}

// SetCanEditRoles sets the value of CanEditRoles.
func (s *Role) SetCanEditRoles(val OptBool) {
	s.CanEditRoles = val
}

// SetCanEditMessages sets the value of CanEditMessages.
func (s *Role) SetCanEditMessages(val OptBool) {
	s.CanEditMessages = val
}

// SetCanGetJoinCode sets the value of CanGetJoinCode.
func (s *Role) SetCanGetJoinCode(val OptBool) {
	s.CanGetJoinCode = val
}

// SetCanEditChatInfo sets the value of CanEditChatInfo.
func (s *Role) SetCanEditChatInfo(val OptBool) {
	s.CanEditChatInfo = val
}

// SetCanDeleteChat sets the value of CanDeleteChat.
func (s *Role) SetCanDeleteChat(val OptBool) {
	s.CanDeleteChat = val
}

func (*Role) createRoleRes()  {}
func (*Role) getRoleByIdRes() {}
func (*Role) updateRoleRes()  {}

type RoleId int

// Ref: #/components/schemas/roleInput
type RoleInput struct {
	Name            string  `json:"name"`
	CanBanUsers     bool    `json:"can_ban_users"`
	CanEditRoles    OptBool `json:"can_edit_roles"`
	CanEditMessages bool    `json:"can_edit_messages"`
	CanGetJoinCode  bool    `json:"can_get_join_code"`
	CanEditChatInfo bool    `json:"can_edit_chat_info"`
	CanDeleteChat   bool    `json:"can_delete_chat"`
}

// GetName returns the value of Name.
func (s *RoleInput) GetName() string {
	return s.Name
}

// GetCanBanUsers returns the value of CanBanUsers.
func (s *RoleInput) GetCanBanUsers() bool {
	return s.CanBanUsers
}

// GetCanEditRoles returns the value of CanEditRoles.
func (s *RoleInput) GetCanEditRoles() OptBool {
	return s.CanEditRoles
}

// GetCanEditMessages returns the value of CanEditMessages.
func (s *RoleInput) GetCanEditMessages() bool {
	return s.CanEditMessages
}

// GetCanGetJoinCode returns the value of CanGetJoinCode.
func (s *RoleInput) GetCanGetJoinCode() bool {
	return s.CanGetJoinCode
}

// GetCanEditChatInfo returns the value of CanEditChatInfo.
func (s *RoleInput) GetCanEditChatInfo() bool {
	return s.CanEditChatInfo
}

// GetCanDeleteChat returns the value of CanDeleteChat.
func (s *RoleInput) GetCanDeleteChat() bool {
	return s.CanDeleteChat
}

// SetName sets the value of Name.
func (s *RoleInput) SetName(val string) {
	s.Name = val
}

// SetCanBanUsers sets the value of CanBanUsers.
func (s *RoleInput) SetCanBanUsers(val bool) {
	s.CanBanUsers = val
}

// SetCanEditRoles sets the value of CanEditRoles.
func (s *RoleInput) SetCanEditRoles(val OptBool) {
	s.CanEditRoles = val
}

// SetCanEditMessages sets the value of CanEditMessages.
func (s *RoleInput) SetCanEditMessages(val bool) {
	s.CanEditMessages = val
}

// SetCanGetJoinCode sets the value of CanGetJoinCode.
func (s *RoleInput) SetCanGetJoinCode(val bool) {
	s.CanGetJoinCode = val
}

// SetCanEditChatInfo sets the value of CanEditChatInfo.
func (s *RoleInput) SetCanEditChatInfo(val bool) {
	s.CanEditChatInfo = val
}

// SetCanDeleteChat sets the value of CanDeleteChat.
func (s *RoleInput) SetCanDeleteChat(val bool) {
	s.CanDeleteChat = val
}

// SetRoleConflict is response for SetRole operation.
type SetRoleConflict struct{}

func (*SetRoleConflict) setRoleRes() {}

// SetRoleNoContent is response for SetRole operation.
type SetRoleNoContent struct{}

func (*SetRoleNoContent) setRoleRes() {}

// SetRoleNotFound is response for SetRole operation.
type SetRoleNotFound struct{}

func (*SetRoleNotFound) setRoleRes() {}

type SetRoleReq struct {
	RoleID RoleId `json:"role_id"`
}

// GetRoleID returns the value of RoleID.
func (s *SetRoleReq) GetRoleID() RoleId {
	return s.RoleID
}

// SetRoleID sets the value of RoleID.
func (s *SetRoleReq) SetRoleID(val RoleId) {
	s.RoleID = val
}

// Ref: #/components/responses/unauthenticatedResponse
type UnauthenticatedResponse struct{}

func (*UnauthenticatedResponse) banUserRes()     {}
func (*UnauthenticatedResponse) checkAccessRes() {}
func (*UnauthenticatedResponse) createChatRes()  {}
func (*UnauthenticatedResponse) createRoleRes()  {}
func (*UnauthenticatedResponse) deleteChatRes()  {}
func (*UnauthenticatedResponse) deleteRoleRes()  {}
func (*UnauthenticatedResponse) getChatByIdRes() {}
func (*UnauthenticatedResponse) getJoinCodeRes() {}
func (*UnauthenticatedResponse) getRoleByIdRes() {}
func (*UnauthenticatedResponse) joinChatRes()    {}
func (*UnauthenticatedResponse) leaveChatRes()   {}
func (*UnauthenticatedResponse) listChatsRes()   {}
func (*UnauthenticatedResponse) listMembersRes() {}
func (*UnauthenticatedResponse) listRolesRes()   {}
func (*UnauthenticatedResponse) setRoleRes()     {}
func (*UnauthenticatedResponse) updateChatRes()  {}
func (*UnauthenticatedResponse) updateRoleRes()  {}

// Ref: #/components/responses/unauthorizedResponse
type UnauthorizedResponse struct{}

func (*UnauthorizedResponse) banUserRes()     {}
func (*UnauthorizedResponse) checkAccessRes() {}
func (*UnauthorizedResponse) createRoleRes()  {}
func (*UnauthorizedResponse) deleteChatRes()  {}
func (*UnauthorizedResponse) deleteRoleRes()  {}
func (*UnauthorizedResponse) getChatByIdRes() {}
func (*UnauthorizedResponse) getJoinCodeRes() {}
func (*UnauthorizedResponse) getRoleByIdRes() {}
func (*UnauthorizedResponse) joinChatRes()    {}
func (*UnauthorizedResponse) listMembersRes() {}
func (*UnauthorizedResponse) listRolesRes()   {}
func (*UnauthorizedResponse) setRoleRes()     {}
func (*UnauthorizedResponse) updateChatRes()  {}
func (*UnauthorizedResponse) updateRoleRes()  {}

// UpdateRoleNotFound is response for UpdateRole operation.
type UpdateRoleNotFound struct{}

func (*UpdateRoleNotFound) updateRoleRes() {}

type UserId string
