// Code generated by ogen, DO NOT EDIT.

package api

type BearerAuth struct {
	Token string
}

// GetToken returns the value of Token.
func (s *BearerAuth) GetToken() string {
	return s.Token
}

// SetToken sets the value of Token.
func (s *BearerAuth) SetToken(val string) {
	s.Token = val
}

type ChatId int

// Ref: #/components/responses/chatNotFoundResponse
type ChatNotFoundResponse struct{}

func (*ChatNotFoundResponse) listMessagesRes() {}
func (*ChatNotFoundResponse) sendMessageRes()  {}

// DeleteMessageNoContent is response for DeleteMessage operation.
type DeleteMessageNoContent struct{}

func (*DeleteMessageNoContent) deleteMessageRes() {}

// DeleteMessageNotFound is response for DeleteMessage operation.
type DeleteMessageNotFound struct{}

func (*DeleteMessageNotFound) deleteMessageRes() {}

// GetMessageByIdNotFound is response for GetMessageById operation.
type GetMessageByIdNotFound struct{}

func (*GetMessageByIdNotFound) getMessageByIdRes() {}

// Ref: #/components/responses/internalErrorResponse
type InternalErrorResponse struct{}

func (*InternalErrorResponse) deleteMessageRes()  {}
func (*InternalErrorResponse) getMessageByIdRes() {}
func (*InternalErrorResponse) listMessagesRes()   {}
func (*InternalErrorResponse) sendMessageRes()    {}
func (*InternalErrorResponse) updateMessageRes()  {}

type InvalidInputResponse struct {
	Message OptString `json:"message"`
}

// GetMessage returns the value of Message.
func (s *InvalidInputResponse) GetMessage() OptString {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *InvalidInputResponse) SetMessage(val OptString) {
	s.Message = val
}

func (*InvalidInputResponse) deleteMessageRes()  {}
func (*InvalidInputResponse) getMessageByIdRes() {}
func (*InvalidInputResponse) listMessagesRes()   {}
func (*InvalidInputResponse) sendMessageRes()    {}
func (*InvalidInputResponse) updateMessageRes()  {}

type ListMessagesOKApplicationJSON []Message

func (*ListMessagesOKApplicationJSON) listMessagesRes() {}

// Ref: #/components/schemas/message
type Message struct {
	ID            OptMessageId `json:"id"`
	SenderID      OptString    `json:"sender_id"`
	Message       OptString    `json:"message"`
	Edited        OptBool      `json:"edited"`
	SendTimestamp OptInt       `json:"send_timestamp"`
}

// GetID returns the value of ID.
func (s *Message) GetID() OptMessageId {
	return s.ID
}

// GetSenderID returns the value of SenderID.
func (s *Message) GetSenderID() OptString {
	return s.SenderID
}

// GetMessage returns the value of Message.
func (s *Message) GetMessage() OptString {
	return s.Message
}

// GetEdited returns the value of Edited.
func (s *Message) GetEdited() OptBool {
	return s.Edited
}

// GetSendTimestamp returns the value of SendTimestamp.
func (s *Message) GetSendTimestamp() OptInt {
	return s.SendTimestamp
}

// SetID sets the value of ID.
func (s *Message) SetID(val OptMessageId) {
	s.ID = val
}

// SetSenderID sets the value of SenderID.
func (s *Message) SetSenderID(val OptString) {
	s.SenderID = val
}

// SetMessage sets the value of Message.
func (s *Message) SetMessage(val OptString) {
	s.Message = val
}

// SetEdited sets the value of Edited.
func (s *Message) SetEdited(val OptBool) {
	s.Edited = val
}

// SetSendTimestamp sets the value of SendTimestamp.
func (s *Message) SetSendTimestamp(val OptInt) {
	s.SendTimestamp = val
}

func (*Message) getMessageByIdRes() {}
func (*Message) sendMessageRes()    {}
func (*Message) updateMessageRes()  {}

type MessageId int

// Ref: #/components/schemas/messageInput
type MessageInput struct {
	Message string `json:"message"`
}

// GetMessage returns the value of Message.
func (s *MessageInput) GetMessage() string {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *MessageInput) SetMessage(val string) {
	s.Message = val
}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMessageId returns new OptMessageId with value set to v.
func NewOptMessageId(v MessageId) OptMessageId {
	return OptMessageId{
		Value: v,
		Set:   true,
	}
}

// OptMessageId is optional MessageId.
type OptMessageId struct {
	Value MessageId
	Set   bool
}

// IsSet returns true if OptMessageId was set.
func (o OptMessageId) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMessageId) Reset() {
	var v MessageId
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMessageId) SetTo(v MessageId) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMessageId) Get() (v MessageId, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMessageId) Or(d MessageId) MessageId {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/responses/unauthenticatedResponse
type UnauthenticatedResponse struct{}

func (*UnauthenticatedResponse) deleteMessageRes()  {}
func (*UnauthenticatedResponse) getMessageByIdRes() {}
func (*UnauthenticatedResponse) listMessagesRes()   {}
func (*UnauthenticatedResponse) sendMessageRes()    {}
func (*UnauthenticatedResponse) updateMessageRes()  {}

// Ref: #/components/responses/unauthorizedResponse
type UnauthorizedResponse struct{}

func (*UnauthorizedResponse) deleteMessageRes()  {}
func (*UnauthorizedResponse) getMessageByIdRes() {}
func (*UnauthorizedResponse) listMessagesRes()   {}
func (*UnauthorizedResponse) sendMessageRes()    {}
func (*UnauthorizedResponse) updateMessageRes()  {}

// UpdateMessageNotFound is response for UpdateMessage operation.
type UpdateMessageNotFound struct{}

func (*UpdateMessageNotFound) updateMessageRes() {}
