// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"
	"net/url"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// DeleteMessageParams is parameters of deleteMessage operation.
type DeleteMessageParams struct {
	// Message id.
	MessageId MessageId
	// Chat id.
	ChatId ChatId
}

func unpackDeleteMessageParams(packed middleware.Parameters) (params DeleteMessageParams) {
	{
		key := middleware.ParameterKey{
			Name: "messageId",
			In:   "path",
		}
		params.MessageId = packed[key].(MessageId)
	}
	{
		key := middleware.ParameterKey{
			Name: "chatId",
			In:   "query",
		}
		params.ChatId = packed[key].(ChatId)
	}
	return params
}

func decodeDeleteMessageParams(args [1]string, argsEscaped bool, r *http.Request) (params DeleteMessageParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: messageId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "messageId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotMessageIdVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotMessageIdVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.MessageId = MessageId(paramsDotMessageIdVal)
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "messageId",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: chatId.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "chatId",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotChatIdVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotChatIdVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ChatId = ChatId(paramsDotChatIdVal)
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "chatId",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetMessageByIdParams is parameters of getMessageById operation.
type GetMessageByIdParams struct {
	// Message id.
	MessageId MessageId
	// Chat id.
	ChatId ChatId
}

func unpackGetMessageByIdParams(packed middleware.Parameters) (params GetMessageByIdParams) {
	{
		key := middleware.ParameterKey{
			Name: "messageId",
			In:   "path",
		}
		params.MessageId = packed[key].(MessageId)
	}
	{
		key := middleware.ParameterKey{
			Name: "chatId",
			In:   "query",
		}
		params.ChatId = packed[key].(ChatId)
	}
	return params
}

func decodeGetMessageByIdParams(args [1]string, argsEscaped bool, r *http.Request) (params GetMessageByIdParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: messageId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "messageId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotMessageIdVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotMessageIdVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.MessageId = MessageId(paramsDotMessageIdVal)
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "messageId",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: chatId.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "chatId",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotChatIdVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotChatIdVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ChatId = ChatId(paramsDotChatIdVal)
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "chatId",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// ListMessagesParams is parameters of listMessages operation.
type ListMessagesParams struct {
	// Chat id.
	ChatId ChatId
	// Limit.
	Limit int
	// Offset.
	Offset int
}

func unpackListMessagesParams(packed middleware.Parameters) (params ListMessagesParams) {
	{
		key := middleware.ParameterKey{
			Name: "chatId",
			In:   "query",
		}
		params.ChatId = packed[key].(ChatId)
	}
	{
		key := middleware.ParameterKey{
			Name: "limit",
			In:   "query",
		}
		params.Limit = packed[key].(int)
	}
	{
		key := middleware.ParameterKey{
			Name: "offset",
			In:   "query",
		}
		params.Offset = packed[key].(int)
	}
	return params
}

func decodeListMessagesParams(args [0]string, argsEscaped bool, r *http.Request) (params ListMessagesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: chatId.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "chatId",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotChatIdVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotChatIdVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ChatId = ChatId(paramsDotChatIdVal)
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "chatId",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: limit.
	{
		val := int(100)
		params.Limit = val
	}
	// Decode query: limit.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.Limit = c
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if err := (validate.Int{
					MinSet:        true,
					Min:           1,
					MaxSet:        false,
					Max:           0,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(params.Limit)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "limit",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: offset.
	{
		val := int(0)
		params.Offset = val
	}
	// Decode query: offset.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "offset",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt(val)
				if err != nil {
					return err
				}

				params.Offset = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "offset",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// SendMessageParams is parameters of sendMessage operation.
type SendMessageParams struct {
	// Chat id.
	ChatId ChatId
}

func unpackSendMessageParams(packed middleware.Parameters) (params SendMessageParams) {
	{
		key := middleware.ParameterKey{
			Name: "chatId",
			In:   "query",
		}
		params.ChatId = packed[key].(ChatId)
	}
	return params
}

func decodeSendMessageParams(args [0]string, argsEscaped bool, r *http.Request) (params SendMessageParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: chatId.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "chatId",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotChatIdVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotChatIdVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ChatId = ChatId(paramsDotChatIdVal)
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "chatId",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// UpdateMessageParams is parameters of updateMessage operation.
type UpdateMessageParams struct {
	// Message id.
	MessageId MessageId
	// Chat id.
	ChatId ChatId
}

func unpackUpdateMessageParams(packed middleware.Parameters) (params UpdateMessageParams) {
	{
		key := middleware.ParameterKey{
			Name: "messageId",
			In:   "path",
		}
		params.MessageId = packed[key].(MessageId)
	}
	{
		key := middleware.ParameterKey{
			Name: "chatId",
			In:   "query",
		}
		params.ChatId = packed[key].(ChatId)
	}
	return params
}

func decodeUpdateMessageParams(args [1]string, argsEscaped bool, r *http.Request) (params UpdateMessageParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: messageId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "messageId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotMessageIdVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotMessageIdVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.MessageId = MessageId(paramsDotMessageIdVal)
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "messageId",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: chatId.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "chatId",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotChatIdVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotChatIdVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ChatId = ChatId(paramsDotChatIdVal)
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "chatId",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}
