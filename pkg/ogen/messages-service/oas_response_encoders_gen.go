// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
)

func encodeDeleteMessageResponse(response DeleteMessageRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *DeleteMessageNoContent:
		w.WriteHeader(204)

		return nil

	case *InvalidInputResponse:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(400)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *UnauthenticatedResponse:
		w.WriteHeader(401)

		return nil

	case *UnauthorizedResponse:
		w.WriteHeader(403)

		return nil

	case *DeleteMessageNotFound:
		w.WriteHeader(404)

		return nil

	case *InternalErrorResponse:
		w.WriteHeader(500)

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeGetMessageByIdResponse(response GetMessageByIdRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *Message:
		if err := func() error {
			if err := response.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "validate")
		}
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *InvalidInputResponse:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(400)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *UnauthenticatedResponse:
		w.WriteHeader(401)

		return nil

	case *UnauthorizedResponse:
		w.WriteHeader(403)

		return nil

	case *GetMessageByIdNotFound:
		w.WriteHeader(404)

		return nil

	case *InternalErrorResponse:
		w.WriteHeader(500)

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeListMessagesResponse(response ListMessagesRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *ListMessagesOKApplicationJSON:
		if err := func() error {
			if err := response.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "validate")
		}
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *InvalidInputResponse:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(400)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *UnauthenticatedResponse:
		w.WriteHeader(401)

		return nil

	case *UnauthorizedResponse:
		w.WriteHeader(403)

		return nil

	case *ChatNotFoundResponse:
		w.WriteHeader(404)

		return nil

	case *InternalErrorResponse:
		w.WriteHeader(500)

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeSendMessageResponse(response SendMessageRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *Message:
		if err := func() error {
			if err := response.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "validate")
		}
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *InvalidInputResponse:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(400)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *UnauthenticatedResponse:
		w.WriteHeader(401)

		return nil

	case *UnauthorizedResponse:
		w.WriteHeader(403)

		return nil

	case *ChatNotFoundResponse:
		w.WriteHeader(404)

		return nil

	case *InternalErrorResponse:
		w.WriteHeader(500)

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeUpdateMessageResponse(response UpdateMessageRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *Message:
		if err := func() error {
			if err := response.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "validate")
		}
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *InvalidInputResponse:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(400)

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *UnauthenticatedResponse:
		w.WriteHeader(401)

		return nil

	case *UnauthorizedResponse:
		w.WriteHeader(403)

		return nil

	case *UpdateMessageNotFound:
		w.WriteHeader(404)

		return nil

	case *InternalErrorResponse:
		w.WriteHeader(500)

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}
