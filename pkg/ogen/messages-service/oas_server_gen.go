// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	MessagesHandler
}

// MessagesHandler handles operations described by OpenAPI v3 specification.
//
// x-ogen-operation-group: Messages
type MessagesHandler interface {
	// DeleteMessage implements deleteMessage operation.
	//
	// Delete message from chat.
	//
	// DELETE /messages/{messageId}
	DeleteMessage(ctx context.Context, params DeleteMessageParams) (DeleteMessageRes, error)
	// GetMessageById implements getMessageById operation.
	//
	// Get message in chat.
	//
	// GET /messages/{messageId}
	GetMessageById(ctx context.Context, params GetMessageByIdParams) (GetMessageByIdRes, error)
	// ListMessages implements listMessages operation.
	//
	// Get messages for chat.
	//
	// GET /messages
	ListMessages(ctx context.Context, params ListMessagesParams) (ListMessagesRes, error)
	// SendMessage implements sendMessage operation.
	//
	// Send new message to chat.
	//
	// POST /messages
	SendMessage(ctx context.Context, req *MessageInput, params SendMessageParams) (SendMessageRes, error)
	// UpdateMessage implements updateMessage operation.
	//
	// Update message in chat.
	//
	// PUT /messages/{messageId}
	UpdateMessage(ctx context.Context, req *MessageInput, params UpdateMessageParams) (UpdateMessageRes, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h   Handler
	sec SecurityHandler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, sec SecurityHandler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		sec:        sec,
		baseServer: s,
	}, nil
}
